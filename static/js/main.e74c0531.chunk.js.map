{"version":3,"sources":["index.js"],"names":["MESSAGES","RESULT","CLEAR","addMessage","message","type","addResult","clear","INTIAL_STATE","messages","result","parser","calculatorReducer","state","action","includes","test","substr","push","charAt","substring","parseFloat","length","parseInt","replace","match","unshift","expression","join","eval","mapStateToProps","mapDispatchToProps","dispatch","addNewMessage","updateResult","reset","Presentational","props","resetHandler","clickHandler","e","target","value","clickEqualsHandler","bind","className","id","this","onClick","href","rel","React","Component","store","createStore","devToolsEnhancer","Container","connect","CalculatorWrapper","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e74c0531.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux';\r\nimport { devToolsEnhancer } from 'redux-devtools-extension';\r\nimport './style.css';\r\nimport { connect, Provider } from 'react-redux'\r\n\r\n//Redux\r\nconst MESSAGES = 'MESSAGES',\r\n  RESULT = 'RESULT',\r\n  CLEAR = 'CLEAR';\r\n\r\nconst addMessage = message => ({\r\n  type: MESSAGES,\r\n  message\r\n});\r\n\r\nconst addResult = () => ({\r\n  type: RESULT\r\n});\r\n\r\nconst clear = () => ({\r\n  type: CLEAR\r\n});\r\n\r\nconst INTIAL_STATE = ({\r\n  messages: [], // store operators and numbers\r\n  result: 0,\r\n  parser: '' //--123+ parse to messages:['-', '-123'], parser: '+'\r\n});\r\n\r\n\r\nconst calculatorReducer = (state = INTIAL_STATE, action) => {\r\n  let messages = [...state.messages];\r\n  let parser = state.parser;\r\n  switch (action.type) {\r\n    case MESSAGES:\r\n      if (messages.includes('=')) {\r\n        if (/[+*/-]/.test(action.message)) { //user previous result\r\n          messages = [state.result];\r\n        } else {\r\n          messages = []; //new calculation\r\n        }\r\n      }\r\n      parser += action.message;\r\n      //reset to last operator (case: +/* followed by any operator, or - followed by +*/)\r\n      if (/^[+/*-][+/*]/.test(parser)) {\r\n        parser = parser.substr(1);\r\n        //reset to last operator (case: -- foloweed by any operator)\r\n      } else if (/^[+*/-]-[+/*-]/.test(parser)) {\r\n        parser = parser.substr(2);\r\n      } else if (! /\\d+[+*/-]$/.test(parser)) {\r\n        // hanlde multiple zeros in beging of a number, allow 0. for float\r\n        if (/^[+*/]?-?0+$/.test(parser)) {\r\n          parser = parser.replace(/0+/, '0');\r\n        } else if (/^[+*/]?-?0+[1-9]$/.test(parser)) {\r\n          parser = parser.replace(/0+/, '');\r\n        }\r\n        // only show one dot for float number\r\n        if ((parser.match(/\\./g) || []).length > 1) {\r\n          parser = parser.substring(0, parser.length - 1);\r\n        }\r\n      } else {\r\n        //meet condition for parsing, ends with at least one digit and an operator\r\n        //at the very beginng, there might not be an operator in parser\r\n        if (/^[+/*-]/.test(parser)) {\r\n          messages.push(parser.charAt(0));\r\n          parser = parser.substring(1); //consume operator, '--1.23+' => '-1.23+' , messages:['-']\r\n        }\r\n        //continue consume parser number part, messages: ['-',-1.23], parser: '+'\r\n        if (parser.includes('.')) {\r\n          messages.push(parseFloat(parser.substring(0, parser.length - 1)));\r\n        } else {\r\n          messages.push(parseInt(parser.substring(0, parser.length - 1)));\r\n        }\r\n        //update parser for next parse\r\n        parser = parser.substring(parser.length - 1);\r\n      }\r\n      return { ...state, messages: messages, parser: parser, result: parser };\r\n    case RESULT:\r\n      //consume remaining parser if any\r\n      if (/^[+*/-]/.test(parser)) {\r\n        messages.push(parser.charAt(0));\r\n        parser = parser.substring(1);\r\n        if (parser.length > 0) {\r\n          if (parser.includes('.')) {\r\n            messages.push(parseFloat(parser));\r\n          } else {\r\n            messages.push(parseInt(parser));\r\n          }\r\n          parser = '';\r\n        }\r\n      }\r\n      // if there is no left hand for first operator in array, use 0\r\n      if (typeof messages[0] !== 'number') {\r\n        messages.unshift(0);\r\n      }\r\n      // no right hand number return current state\r\n      if (messages.length <= 2 || typeof messages[messages.length - 1] !== 'number') return state;\r\n      const expression = messages.join(' ');\r\n      let result = eval(expression);\r\n      messages.push('=', result);\r\n      return { ...state, messages: messages, parser: '', result: result };\r\n    case CLEAR:\r\n      return INTIAL_STATE;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    messages: state.messages,\r\n    result: state.result,\r\n    parser: state.parser\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addNewMessage: message => { dispatch(addMessage(message)) },\r\n    updateResult: () => { dispatch(addResult()) },\r\n    reset: () => { dispatch(clear()) }\r\n  }\r\n}\r\n\r\n//React\r\nclass Presentational extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.resetHandler = this.resetHandler.bind(this);\r\n    this.clickHandler = this.clickHandler.bind(this);\r\n    this.clickEqualsHandler = this.clickEqualsHandler.bind(this);\r\n  }\r\n\r\n  resetHandler = () => {\r\n    this.props.reset();\r\n  }\r\n\r\n  clickHandler = e => {\r\n    this.props.addNewMessage(e.target.value);\r\n  }\r\n\r\n  clickEqualsHandler = () => {\r\n    this.props.updateResult();\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <div className='box-group'>\r\n          <div className=\"screen\">\r\n            <div id=\"formula\">{this.props.messages.join(\"\") + this.props.parser}</div>\r\n            <div id=\"display\">{this.props.result}</div>\r\n          </div>\r\n          <button id=\"clear\" onClick={this.resetHandler}>AC</button>\r\n          <button id=\"divide\" onClick={this.clickHandler} value=\"/\">/</button>\r\n          <button id=\"multiply\" onClick={this.clickHandler} value=\"*\">*</button>\r\n\r\n          <button id=\"seven\" onClick={this.clickHandler} value=\"7\">7</button>\r\n          <button id=\"eight\" onClick={this.clickHandler} value=\"8\">8</button>\r\n          <button id=\"nine\" onClick={this.clickHandler} value=\"9\">9</button>\r\n          <button id=\"add\" onClick={this.clickHandler} value=\"+\">+</button>\r\n\r\n          <button id=\"four\" onClick={this.clickHandler} value=\"4\">4</button>\r\n          <button id=\"five\" onClick={this.clickHandler} value=\"5\">5</button>\r\n          <button id=\"six\" onClick={this.clickHandler} value=\"6\">6</button>\r\n          <button id=\"subtract\" onClick={this.clickHandler} value=\"-\">-</button>\r\n\r\n          <button id=\"one\" onClick={this.clickHandler} value=\"1\">1</button>\r\n          <button id=\"two\" onClick={this.clickHandler} value=\"2\">2</button>\r\n          <button id=\"three\" onClick={this.clickHandler} value=\"3\">3</button>\r\n\r\n          <button id=\"equals\" onClick={this.clickEqualsHandler}>=</button>\r\n          <button id=\"zero\" onClick={this.clickHandler} value=\"0\">0</button>\r\n          <button id=\"decimal\" onClick={this.clickHandler} value=\".\">.</button>\r\n        </div>\r\n        <p>Coded by Yong Xia <a href=\"https://github.com/yongxia/js-calculator\" target=\"_blank\" rel=\"noreferrer\"><i className=\"fa fa-github\"></i> Github</a></p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//react-dedux\r\nconst store = createStore(calculatorReducer, devToolsEnhancer());\r\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Presentational);\r\n\r\nclass CalculatorWrapper extends React.Component {\r\n  render = () => (\r\n    <Provider store={store}>\r\n      <Container />\r\n    </Provider>\r\n  )\r\n}\r\n\r\nReactDOM.render(<CalculatorWrapper />, document.getElementById('root'))"],"sourceRoot":""}